{"!define":{"apm":{"url":{"!type":"fn() -> str","!doc":"\nReturn the current url of the apm.\n\n@return The apm url.\n\n"},"ping":{"!type":"fn() -> num","!doc":"\nReturn the current ping of the apm.\n\n@return The apm ping.\n\n"},"ttl":{"!type":"fn() -> num","!doc":"\nReturn the current ttl of the apm.\n\n@return The apm ttl.\n\n"},"traceroute":{"!type":"fn() -> Arr","!doc":"\nReturn the current traceroute of the apm.\n\n@return The apm traceroute.\n\n"},"speed":{"!type":"fn() -> num","!doc":"\nReturn the current speed of the apm.\n\n@return The apm speed.\n\n"},"size":{"!type":"fn() -> num","!doc":"\nReturn the current size of the apm.\n\n@return The apm size.\n\n"},"time":{"!type":"fn() -> num","!doc":"\nReturn the current time of the apm.\n\n@return The apm time.\n\n"},"onScanCompleted":{"!type":"fn(url: str, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the apm dart detects a scanCompleted.\nProvided that the filters matches with the filters.\n\n@param url The url configuration to set, can contain:\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onDownloadCompleted":{"!type":"fn(url: str, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the apm dart detects a downloadCompleted.\nProvided that the filters matches with the filters.\n\n@param url The url configuration to set, can contain:\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onUploadCompleted":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the apm dart detects a uploadCompleted.\nProvided that the filters matches with the filters.\n\n@param filter The apm configuration to set, can contain:\n- url (String): The 'url' to contact,\n- protocol (String): The 'protocol' to use (FTP{,s}),\n- username (String): The 'username' if any,\n- password (String): The 'password' if any,\n- size (Integer): The 'size' of the file to upload.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"map":{"!type":"fn(arg0: num) -> Data"},"stop":{"!type":"fn()"},"!doc":"\nRetrieve data about the user apm.\n\n","available":{"!type":"fn(arg0: num) -> bool"},"seeds":{"!type":"fn() -> num"},"data":{"!type":"fn() -> Data"},"NAME":{"!type":"str","!doc":"\nidentifier of the sting to be used as require('apm').\n\n"}},"networkAnalysis":{"isNetworkType":{"!type":"fn(networkType: num) -> bool","!doc":"\nTells if the current networkType correspond to the asked networkType.\n\n@param networkType The networkType to check.\n@return true if networkTypes matches, false otherwise.\n\n"},"networkType":{"!type":"fn() -> str","!doc":"\nReturn the current networkType of the networkAnalysis.\n\n@return The networkAnalysis networkType.\n\n"},"error":{"!type":"fn() -> str","!doc":"\nReturn the current error of the networkAnalysis.\n\n@return The networkAnalysis error.\n\n"},"task":{"!type":"fn() -> str","!doc":"\nReturn the current task of the networkAnalysis.\n\n@return The networkAnalysis task.\n\n"},"ip":{"!type":"fn() -> str","!doc":"\nReturn the current ip of the networkAnalysis.\n\n@return The networkAnalysis ip.\n\n"},"duration":{"!type":"fn() -> num","!doc":"\nReturn the current duration of the networkAnalysis.\n\n@return The networkAnalysis duration.\n\n"},"hostname":{"!type":"fn() -> str","!doc":"\nReturn the current hostname of the networkAnalysis.\n\n@return The networkAnalysis hostname.\n\n"},"ttl":{"!type":"fn() -> num","!doc":"\nReturn the current ttl of the networkAnalysis.\n\n@return The networkAnalysis ttl.\n\n"},"traceroute":{"!type":"fn() -> Arr","!doc":"\nReturn the current traceroute of the networkAnalysis.\n\n@return The networkAnalysis traceroute.\n\n"},"speed":{"!type":"fn() -> num","!doc":"\nReturn the current speed of the networkAnalysis.\n\n@return The networkAnalysis speed.\n\n"},"speeds":{"!type":"fn() -> Arr","!doc":"\nReturn the current speeds of the networkAnalysis.\n\n@return The networkAnalysis speeds.\n\n"},"size":{"!type":"fn() -> num","!doc":"\nReturn the current size of the networkAnalysis.\n\n@return The networkAnalysis size.\n\n"},"records":{"!type":"fn() -> Arr","!doc":"\nReturn the current records of the networkAnalysis.\n\n@return The networkAnalysis records.\n\n"},"packetCount":{"!type":"fn() -> num","!doc":"\nReturn the current packetCount of the networkAnalysis.\n\n@return The networkAnalysis packetCount.\n\n"},"outOfOrderRatio":{"!type":"fn() -> num","!doc":"\nReturn the current outOfOrderRatio of the networkAnalysis.\n\n@return The networkAnalysis outOfOrderRatio.\n\n"},"lossRatio":{"!type":"fn() -> num","!doc":"\nReturn the current lossRatio of the networkAnalysis.\n\n@return The networkAnalysis lossRatio.\n\n"},"jitter":{"!type":"fn() -> num","!doc":"\nReturn the current jitter of the networkAnalysis.\n\n@return The networkAnalysis jitter.\n\n"},"onTcpUpload":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a tcpUpload.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- volume (Integer): The data volume to upload in megabytes,\n- size (Integer): The size of each packet to send in bytes,\n- period (Float): The sample period in seconds,\n- slowStart (Float): The slow start period that will be ignored in results in seconds.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onTcpDownload":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a tcpDownload.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- volume (Integer): The data volume to download in megabytes,\n- size (Integer): The size of each packet to send in bytes,\n- period (Float): The sample period in seconds,\n- slowStart (Float): The slow start period that will be ignored in results in seconds.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onUdpDownload":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a udpDownload.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- size (Integer): [Mandatory] The size of each packet to send in bytes,\n- cycle (Integer): [Mandatory] The number of burst to send,\n- count (Integer): The number of packet to send by burst,\n- interval (Float): Time interval between each burst in milliseconds.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onUdpUpload":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a udpUpload.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- size (Integer): [Mandatory] The size of each packet to send in bytes,\n- cycle (Integer): [Mandatory] The number of burst to send,\n- count (Integer): The number of packet to send by burst,\n- interval (Float): Time interval between each burst in milliseconds.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onDnsRequest":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a dnsRequest.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- target (String): [Mandatory] The domain to query,\n- server (String): The DNS server to query, will use the phone one if nothing is configured,\n- type (String): The type of DNS request,\n- class (String): The class of DNS request.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onPingRequest":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a pingRequest.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- target (String): [Mandatory] The server to ping,\n- ttl (Integer): The maximum TTL.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onTracerouteRequest":{"!type":"fn(filter: JSON, callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the networkAnalysis dart detects a tracerouteRequest.\nProvided that the filters matches with the filters.\n\n@param filter The networkAnalysis configuration to set, can contain:\n- target (String): [Mandatory] The server to ping,\n- ttl (Integer): The maximum TTL.\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"map":{"!type":"fn(arg0: num) -> Data"},"stop":{"!type":"fn()"},"!doc":"\nRetrieve data about the user networkAnalysis.\n\n","available":{"!type":"fn(arg0: num) -> bool"},"seeds":{"!type":"fn() -> num"},"data":{"!type":"fn() -> Data"},"NAME":{"!type":"str","!doc":"\nidentifier of the sting to be used as require('networkAnalysis').\n\n"},"UNKNOWN":{"!type":"num","!doc":"\nConstant representing the UNKNOWN NetworkType of the networkAnalysis.\n\n"},"NONE":{"!type":"num","!doc":"\nConstant representing the NONE NetworkType of the networkAnalysis.\n\n"},"WIFI":{"!type":"num","!doc":"\nConstant representing the WIFI NetworkType of the networkAnalysis.\n\n"},"ETHERNET":{"!type":"num","!doc":"\nConstant representing the ETHERNET NetworkType of the networkAnalysis.\n\n"},"BLUETOOTH":{"!type":"num","!doc":"\nConstant representing the BLUETOOTH NetworkType of the networkAnalysis.\n\n"},"MOB_UNKNOWN":{"!type":"num","!doc":"\nConstant representing the MOB_UNKNOWN NetworkType of the networkAnalysis.\n\n"},"MOB_2G":{"!type":"num","!doc":"\nConstant representing the MOB_2G NetworkType of the networkAnalysis.\n\n"},"MOB_3G":{"!type":"num","!doc":"\nConstant representing the MOB_3G NetworkType of the networkAnalysis.\n\n"},"MOB_4G":{"!type":"num","!doc":"\nConstant representing the MOB_4G NetworkType of the networkAnalysis.\n\n"}}},"_sting_definitions":{"_apm":{"!type":"apm"},"_networkAnalysis":{"!type":"networkAnalysis"}},"!name":"APISENSE-Network"}