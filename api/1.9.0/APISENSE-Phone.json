{"!define":{"call":{"duration":{"!type":"fn() -> num","!doc":"\nReturn the current duration of the call.\n\n@return The call duration.\n\n"},"contact":{"!type":"fn() -> str","!doc":"\nReturn the current contact of the call.\n\n@return The call contact.\n\n"},"carrier":{"!type":"fn() -> str","!doc":"\nReturn the current carrier of the call.\n\n@return The call carrier.\n\n"},"neighbouringCells":{"!type":"fn() -> Arr","!doc":"\nReturn the current neighbouringCells of the call.\n\n@return The call neighbouringCells.\n\n"},"onCallEnded":{"!type":"fn(callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the call dart detects a callEnded.\n\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"map":{"!type":"fn(arg0: num) -> Data"},"stop":{"!type":"fn()"},"!doc":"\nRetrieve data about the user call.\n\n","available":{"!type":"fn(arg0: num) -> bool"},"seeds":{"!type":"fn() -> num"},"data":{"!type":"fn() -> Data"},"NAME":{"!type":"str","!doc":"\nidentifier of the sting to be used as require('call').\n\n"}},"device":{"manufacturer":{"!type":"fn() -> str","!doc":"\nReturn the current manufacturer of the device.\n\n@return The device manufacturer.\n\n"},"model":{"!type":"fn() -> str","!doc":"\nReturn the current model of the device.\n\n@return The device model.\n\n"},"os":{"!type":"fn() -> str","!doc":"\nReturn the current os of the device.\n\n@return The device os.\n\n"},"version":{"!type":"fn() -> str","!doc":"\nReturn the current version of the device.\n\n@return The device version.\n\n"},"screenSize":{"!type":"fn() -> num","!doc":"\nReturn the current screenSize of the device.\n\n@return The device screenSize.\n\n"},"resolution":{"!type":"fn() -> str","!doc":"\nReturn the current resolution of the device.\n\n@return The device resolution.\n\n"},"rotation":{"!type":"fn() -> num","!doc":"\nReturn the current rotation of the device.\n\n@return The device rotation.\n\n"},"map":{"!type":"fn(arg0: num) -> Data"},"stop":{"!type":"fn()"},"!doc":"\nRetrieve data about the user device.\n\n","available":{"!type":"fn(arg0: num) -> bool"},"seeds":{"!type":"fn() -> num"},"data":{"!type":"fn() -> Data"},"NAME":{"!type":"str","!doc":"\nidentifier of the sting to be used as require('device').\n\n"}},"localStorage":{"map":{"!type":"fn(arg0: num) -> Data"},"stop":{"!type":"fn()"},"!doc":"\nRetrieve data about the user localStorage.\n\n","available":{"!type":"fn(arg0: num) -> bool"},"seeds":{"!type":"fn() -> num"},"data":{"!type":"fn() -> Data"},"store":{"!type":"fn(toSave: JSON) -> num","!doc":"\nSave the given json in a local database.\n\n@param toSave A Json object to save.\n\n"},"entries":{"!type":"fn() -> str","!doc":"\nRetrieve every store object. This method returns the raw string representing a JSON Array, you may want to parse it with 'JSON.parse'\n\n"},"retrieve":{"!type":"fn(identifier: num) -> str","!doc":"\nRetrieve an object from the ID returned by the 'store' method. This method returns the raw string representing a JSON Object, you may want to parse it with 'JSON.parse'\n\n@param identifier ID of the entry to retrieve.\n\n"},"drop":{"!type":"fn() -> Void","!doc":"\nClear the store.\n\n"},"remove":{"!type":"fn(identifier: num) -> Void","!doc":"\nRemove an object from the ID returned by the 'store' method.\n\n@param identifier ID of the entry to remove.\n\n"},"NAME":{"!type":"str","!doc":"\nidentifier of the sting to be used as require('localStorage').\n\n"}},"system":{"foreground":{"!type":"fn() -> str","!doc":"\nReturn the current foreground of the system.\n\n@return The system foreground.\n\n"},"services":{"!type":"fn() -> Arr","!doc":"\nReturn the current services of the system.\n\n@return The system services.\n\n"},"isScreen":{"!type":"fn(screen: num) -> bool","!doc":"\nTells if the current screen correspond to the asked screen.\n\n@param screen The screen to check.\n@return true if screens matches, false otherwise.\n\n"},"screen":{"!type":"fn() -> str","!doc":"\nReturn the current screen of the system.\n\n@return The system screen.\n\n"},"isLock":{"!type":"fn(lock: num) -> bool","!doc":"\nTells if the current lock correspond to the asked lock.\n\n@param lock The lock to check.\n@return true if locks matches, false otherwise.\n\n"},"lock":{"!type":"fn() -> str","!doc":"\nReturn the current lock of the system.\n\n@return The system lock.\n\n"},"onScreenUnlocked":{"!type":"fn(callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the system dart detects a screenUnlocked.\n\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onScreenStateChanged":{"!type":"fn(callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the system dart detects a screenStateChanged.\n\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"onForegroundAppChanged":{"!type":"fn(callback: fn(JSON)) -> Token","!doc":"\nExecute the callback when the system dart detects a foregroundAppChanged.\n\n@param callback The action to process when done.\n@return The cancellation Token.\n\n"},"map":{"!type":"fn(arg0: num) -> Data"},"stop":{"!type":"fn()"},"!doc":"\nRetrieve data about the user system.\n\n","available":{"!type":"fn(arg0: num) -> bool"},"seeds":{"!type":"fn() -> num"},"data":{"!type":"fn() -> Data"},"NAME":{"!type":"str","!doc":"\nidentifier of the sting to be used as require('system').\n\n"},"ON":{"!type":"num","!doc":"\nConstant representing the ON Screen of the system.\n\n"},"OFF":{"!type":"num","!doc":"\nConstant representing the OFF Screen of the system.\n\n"},"UNKNOWN":{"!type":"num","!doc":"\nConstant representing the UNKNOWN Screen of the system.\n\n"},"LOCKED":{"!type":"num","!doc":"\nConstant representing the LOCKED Lock of the system.\n\n"},"UNLOCKED":{"!type":"num","!doc":"\nConstant representing the UNLOCKED Lock of the system.\n\n"},"NOT_SECURED":{"!type":"num","!doc":"\nConstant representing the NOT_SECURED Lock of the system.\n\n"}}},"_sting_definitions":{"_call":{"!type":"call"},"_device":{"!type":"device"},"_localStorage":{"!type":"localStorage"},"_system":{"!type":"system"}},"!name":"APISENSE-Phone"}